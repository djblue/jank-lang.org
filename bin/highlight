#!/usr/bin/env node

import { createHighlighter } from 'shiki'
import { readFileSync } from 'fs'
import { AnsiUp } from 'ansi_up'
import { execSync } from 'node:child_process';

const file = process.argv[2];
const file_type = process.argv[3];

const code = readFileSync(file).toString();

if(file_type === 'ansi')
{
  const ansi_up = new AnsiUp();
  ansi_up.escape_html = true;
  ansi_up.use_classes = true;
  const html = ansi_up.ansi_to_html(code.trim());
  const last_span = html.lastIndexOf("</span>");
  if(last_span === -1) {
    console.log(html);
  } else {
    console.log(html.slice(0, last_span + 7));
  }
  process.exit(0);
}

/* We have a custom monokai which disables underlining for types. */
const monokai = JSON.parse(readFileSync(process.cwd() + '/dev-resources/monokai.json', 'utf8'));

const highlighter = await createHighlighter({
  langs: [],
  themes: [monokai]
})

if(file_type === 'clojure')
{ await highlighter.loadLanguage(JSON.parse(readFileSync('dev-resources/clojure.tmLanguage.json'))) }
else if(file_type === 'llvm')
{ await highlighter.loadLanguage(JSON.parse(readFileSync('dev-resources/LLVM.tmLanguage.json'))) }
else
{ await highlighter.loadLanguage(file_type) }

const html = await highlighter.codeToHtml(code, {
  lang: file_type,
  theme: 'monokai'
});

console.log(html);
